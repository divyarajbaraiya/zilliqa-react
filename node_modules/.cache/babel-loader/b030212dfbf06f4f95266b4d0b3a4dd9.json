{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@zilliqa-js/core'), require('@zilliqa-js/crypto'), require('@zilliqa-js/util'), require('@zilliqa-js/account')) : typeof define === 'function' && define.amd ? define(['exports', '@zilliqa-js/core', '@zilliqa-js/crypto', '@zilliqa-js/util', '@zilliqa-js/account'], factory) : factory(global.zjsBlockchain = {}, global['@zilliqa-js/core'], global['@zilliqa-js/crypto'], global['@zilliqa-js/util'], global['@zilliqa-js/account']);\n})(this, function (exports, core, crypto, util, account) {\n  'use strict';\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n\n      return t;\n    };\n\n    return __assign.apply(this, arguments);\n  };\n\n  function __rest(s, e) {\n    var t = {};\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n  }\n\n  function __decorate(decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  }\n\n  function __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n  }\n\n  function __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function step(result) {\n        result.done ? resolve(result.value) : new P(function (resolve) {\n          resolve(result.value);\n        }).then(fulfilled, rejected);\n      }\n\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n\n  function __generator(thisArg, body) {\n    var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n        f,\n        y,\n        t,\n        g;\n    return g = {\n      next: verb(0),\n      \"throw\": verb(1),\n      \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n      return this;\n    }), g;\n\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n\n      while (_) try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n\n      if (op[0] & 5) throw op[1];\n      return {\n        value: op[0] ? op[1] : void 0,\n        done: true\n      };\n    }\n  } //  This file is part of Zilliqa-Javascript-Library.\n\n\n  function toTxParams(response) {\n    var _a = response.result,\n        toAddr = _a.toAddr,\n        senderPubKey = _a.senderPubKey,\n        gasPrice = _a.gasPrice,\n        gasLimit = _a.gasLimit,\n        nonce = _a.nonce,\n        amount = _a.amount,\n        receipt = _a.receipt,\n        version = _a.version,\n        code = _a.code,\n        data = _a.data,\n        rest = __rest(_a, [\"toAddr\", \"senderPubKey\", \"gasPrice\", \"gasLimit\", \"nonce\", \"amount\", \"receipt\", \"version\", \"code\", \"data\"]);\n\n    var msg = receipt.errors ? Object.keys(receipt.errors).reduce(function (acc, depth) {\n      var _a;\n\n      var errorMsgList = receipt.errors[depth].map(function (num) {\n        return core.TransactionError[num];\n      });\n      return __assign(__assign({}, acc), (_a = {}, _a[depth] = errorMsgList, _a));\n    }, {}) : {};\n    return __assign(__assign({}, rest), {\n      version: parseInt(version, 10),\n      toAddr: crypto.toChecksumAddress(toAddr),\n      pubKey: senderPubKey.replace('0x', ''),\n      gasPrice: new util.BN(gasPrice),\n      gasLimit: util.Long.fromString(gasLimit, 10),\n      amount: new util.BN(amount),\n      nonce: parseInt(nonce, 10),\n      receipt: __assign(__assign({}, receipt), {\n        errors: msg,\n        cumulative_gas: parseInt(receipt.cumulative_gas, 10)\n      })\n    });\n  } //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var Blockchain = function () {\n    function Blockchain(provider, signer) {\n      this.provider = provider;\n      this.provider.middleware.request.use(account.util.formatOutgoingTx, \"CreateTransaction\"\n      /* CreateTransaction */\n      );\n      this.signer = signer;\n    }\n    /**\r\n     * getBlockChainInfo\r\n     *\r\n     * @returns {Promise<RPCResponse<BlockchainInfo, string>>}\r\n     */\n\n\n    Blockchain.prototype.getBlockChainInfo = function () {\n      return this.provider.send(\"GetBlockchainInfo\"\n      /* GetBlockchainInfo */\n      );\n    };\n    /**\r\n     * getShardingStructure\r\n     *\r\n     * @returns {Promise<RPCResponse<ShardingStructure, string>>}\r\n     */\n\n\n    Blockchain.prototype.getShardingStructure = function () {\n      return this.provider.send(\"GetShardingStructure\"\n      /* GetShardingStructure */\n      );\n    };\n    /**\r\n     * getDSBlock\r\n     *\r\n     * Get details of a Directory Service block by block number.\r\n     *\r\n     * @param {number} blockNum\r\n     * @returns {Promise<RPCResponse<DsBlockObj, string>>}\r\n     */\n\n\n    Blockchain.prototype.getDSBlock = function (blockNum) {\n      return this.provider.send(\"GetDsBlock\"\n      /* GetDSBlock */\n      , blockNum.toString());\n    };\n    /**\r\n     * getLatestDSBlock\r\n     *\r\n     * Get details of the most recent Directory Service block.\r\n     *\r\n     * @returns {Promise<RPCResponse<DsBlockObj, string>>}\r\n     */\n\n\n    Blockchain.prototype.getLatestDSBlock = function () {\n      return this.provider.send(\"GetLatestDsBlock\"\n      /* GetLatestDSBlock */\n      );\n    };\n    /**\r\n     * getNumDSBlocks\r\n     *\r\n     * Gets the number of DS blocks that the network has processed.\r\n     *\r\n     * @returns {Promise<RPCResponse<string, string>>}\r\n     */\n\n\n    Blockchain.prototype.getNumDSBlocks = function () {\n      return this.provider.send(\"GetNumDSBlocks\"\n      /* GetNumDSBlocks */\n      );\n    };\n    /**\r\n     * getDSBlockRate\r\n     *\r\n     * Gets the average rate of DS blocks processed per second\r\n     *\r\n     * @returns {Promise<RPCResponse<number, string>>}\r\n     */\n\n\n    Blockchain.prototype.getDSBlockRate = function () {\n      return this.provider.send(\"GetDSBlockRate\"\n      /* GetDSBlockRate */\n      );\n    };\n    /**\r\n     * getDSBlockListing\r\n     *\r\n     * Get a paginated list of Directory Service blocks. Pass in page number as\r\n     * parameter. Returns a maxPages variable that specifies the max number of\r\n     * pages. 1 - latest blocks, maxPages - oldest blocks.\r\n     *\r\n     * @param {number} max\r\n     * @returns {Promise<RPCResponse<BlockList, string>>}\r\n     */\n\n\n    Blockchain.prototype.getDSBlockListing = function (max) {\n      return this.provider.send(\"DSBlockListing\"\n      /* DSBlockListing */\n      , max);\n    };\n    /**\r\n     * getTxBlock\r\n     *\r\n     * Get details of a Transaction block by block number.\r\n     *\r\n     * @param {number} blockNum\r\n     * @returns {Promise<RPCResponse<TxBlockObj, string>>}\r\n     */\n\n\n    Blockchain.prototype.getTxBlock = function (blockNum) {\n      return this.provider.send(\"GetTxBlock\"\n      /* GetTxBlock */\n      , blockNum.toString());\n    };\n    /**\r\n     * getLatestTxBlock\r\n     *\r\n     * Get details of the most recent Transaction block.\r\n     *\r\n     * @returns {Promise<RPCResponse<TxBlockObj, string>>}\r\n     */\n\n\n    Blockchain.prototype.getLatestTxBlock = function () {\n      return this.provider.send(\"GetLatestTxBlock\"\n      /* GetLatestTxBlock */\n      );\n    };\n    /**\r\n     * getNumTxBlocks\r\n     *\r\n     * Gets the total number of TxBlocks.\r\n     *\r\n     * @returns {Promise<RPCResponse<string, string>>}\r\n     */\n\n\n    Blockchain.prototype.getNumTxBlocks = function () {\n      return this.provider.send(\"GetNumTxBlocks\"\n      /* GetNumTxBlocks */\n      );\n    };\n    /**\r\n     * getTxBlockRate\r\n     *\r\n     * Gets the average number of Tx blocks per second.\r\n     *\r\n     * @returns {Promise<RPCResponse<number, string>>}\r\n     */\n\n\n    Blockchain.prototype.getTxBlockRate = function () {\n      return this.provider.send(\"GetTxBlockRate\"\n      /* GetTxBlockRate */\n      );\n    };\n    /**\r\n     * getTxBlockListing\r\n     *\r\n     * Get a paginated list of Transaction blocks. Takes a page number as\r\n     * parameter, where each page contains a list of 10 blocks (max). Returns\r\n     * a maxPages variable that specifies the max number of pages. 1 - latest\r\n     * blocks, maxPages - oldest blocks.\r\n     *\r\n     * @param {number} max\r\n     * @returns {Promise<RPCResponse<BlockList, string>>}\r\n     */\n\n\n    Blockchain.prototype.getTxBlockListing = function (max) {\n      return this.provider.send(\"TxBlockListing\"\n      /* TxBlockListing */\n      , max);\n    };\n    /**\r\n     * getNumTransactions\r\n     *\r\n     * Gets the number of transactions processed by the network so far.\r\n     *\r\n     * @returns {Promise<RPCResponse<string, string>>}\r\n     */\n\n\n    Blockchain.prototype.getNumTransactions = function () {\n      return this.provider.send(\"GetNumTransactions\"\n      /* GetNumTransactions */\n      );\n    };\n    /**\r\n     * getTransactionRate\r\n     *\r\n     * Gets the number of transactions processed per second\r\n     *\r\n     * @returns {Promise<RPCResponse<number, string>>}\r\n     */\n\n\n    Blockchain.prototype.getTransactionRate = function () {\n      return this.provider.send(\"GetTransactionRate\"\n      /* GetTransactionRate */\n      );\n    };\n    /**\r\n     * getCurrentMiniEpoch\r\n     *\r\n     * Gets the current Tx Epoch.\r\n     *\r\n     * @returns {Promise<RPCResponse<string, string>>}\r\n     */\n\n\n    Blockchain.prototype.getCurrentMiniEpoch = function () {\n      return this.provider.send(\"GetCurrentMiniEpoch\"\n      /* GetCurrentMiniEpoch */\n      );\n    };\n    /**\r\n     * getCurrentDSEpoch\r\n     *\r\n     * Gets the current DS Epoch.\r\n     *\r\n     * @returns {Promise<RPCResponse<any, string>>}\r\n     */\n\n\n    Blockchain.prototype.getCurrentDSEpoch = function () {\n      return this.provider.send(\"GetCurrentDSEpoch\"\n      /* GetCurrentDSEpoch */\n      );\n    };\n    /**\r\n     * getPrevDifficulty\r\n     *\r\n     * Gets shard difficulty for previous PoW round\r\n     *\r\n     * @returns {Promise<RPCResponse<number, string>>}\r\n     */\n\n\n    Blockchain.prototype.getPrevDifficulty = function () {\n      return this.provider.send(\"GetPrevDifficulty\"\n      /* GetPrevDifficulty */\n      );\n    };\n    /**\r\n     * getPrevDSDifficulty\r\n     *\r\n     * Gets DS difficulty for previous PoW round\r\n     *\r\n     * @returns {Promise<RPCResponse<number, string>>}\r\n     */\n\n\n    Blockchain.prototype.getPrevDSDifficulty = function () {\n      return this.provider.send(\"GetPrevDSDifficulty\"\n      /* GetPrevDSDifficulty */\n      );\n    };\n    /**\r\n     * getTotalCoinSupply\r\n     *\r\n     * Returns the total supply (ZIL) of coins in the network.\r\n     */\n\n\n    Blockchain.prototype.getTotalCoinSupply = function () {\n      return this.provider.send(\"GetTotalCoinSupply\"\n      /* GetTotalCoinSupply */\n      );\n    };\n    /**\r\n     * getMinerInfo\r\n     *\r\n     * Returns the mining nodes (i.e., the members of the DS committee and shards) at the specified DS block.\r\n     *\r\n     * Notes:\r\n     * 1. Nodes owned by Zilliqa Research are omitted.\r\n     * 2. dscommittee has no size field since the DS committee size is fixed for a given chain.\r\n     * 3. For the Zilliqa Mainnet, this API is only available from DS block 5500 onwards.\r\n     *\r\n     */\n\n\n    Blockchain.prototype.getMinerInfo = function (dsBlockNumber) {\n      return this.provider.send(\"GetMinerInfo\"\n      /* GetMinerInfo */\n      , dsBlockNumber);\n    };\n    /**\r\n     * createTransaction\r\n     *\r\n     * Creates a transaction and polls the lookup node for a transaction\r\n     * receipt. The transaction is considered to be lost if it is not confirmed\r\n     * within the timeout period.\r\n     *\r\n     * @param {Transaction} tx\r\n     * @param {number} maxAttempts - (optional) number of times to poll before timing out\r\n     * @param {number} number - (optional) interval in ms\r\n     * @returns {Promise<Transaction>} - the Transaction that has been signed and\r\n     * broadcasted to the network.\r\n     */\n\n\n    Blockchain.prototype.createTransaction = function (tx, maxAttempts, interval, blockConfirm) {\n      if (maxAttempts === void 0) {\n        maxAttempts = core.GET_TX_ATTEMPTS;\n      }\n\n      if (interval === void 0) {\n        interval = 1000;\n      }\n\n      if (blockConfirm === void 0) {\n        blockConfirm = false;\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        var response, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , this.provider.send(\"CreateTransaction\"\n              /* CreateTransaction */\n              , __assign(__assign({}, tx.txParams), {\n                priority: tx.toDS\n              }))];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.error) {\n                throw response.error;\n              }\n\n              if (blockConfirm) {\n                return [2\n                /*return*/\n                , tx.blockConfirm(response.result.TranID, maxAttempts, interval)];\n              }\n\n              return [2\n              /*return*/\n              , tx.confirm(response.result.TranID, maxAttempts, interval)];\n\n            case 2:\n              err_1 = _a.sent();\n              throw err_1;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n    /**\r\n     * createTransactionRaw\r\n     *\r\n     * Create a transaction by using a exist signed transaction payload\r\n     * This payload may come form some offline signing software like ledger\r\n     * Currently we haven't supported convert a singed transaction back to transaction param, so we won't perform\r\n     * confirm logic here, but there is another convenient way to do so, can refer examples/createTransactionRaw.js\r\n     *\r\n     * @param payload\r\n     */\n\n\n    Blockchain.prototype.createTransactionRaw = function (payload) {\n      return __awaiter(this, void 0, void 0, function () {\n        var tx, response, err_2;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              tx = JSON.parse(payload);\n              return [4\n              /*yield*/\n              , this.provider.send(\"CreateTransaction\"\n              /* CreateTransaction */\n              , tx)];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.error) {\n                throw response.error;\n              }\n\n              return [2\n              /*return*/\n              , response.result.TranID];\n\n            case 2:\n              err_2 = _a.sent();\n              throw err_2;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    Blockchain.prototype.createTransactionWithoutConfirm = function (tx) {\n      return __awaiter(this, void 0, void 0, function () {\n        var response, err_3;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , this.provider.send(\"CreateTransaction\"\n              /* CreateTransaction */\n              , __assign(__assign({}, tx.txParams), {\n                priority: tx.toDS\n              }))];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.error) {\n                throw response.error;\n              }\n\n              tx.id = response.result.TranID;\n              return [2\n              /*return*/\n              , tx];\n\n            case 2:\n              err_3 = _a.sent();\n              throw err_3;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n    /**\r\n     * getTransaction\r\n     *\r\n     * Retrieves a transaction from the blockchain by its hash. If the result\r\n     * contains an Error, a rejected Promise is returned with the erorr message.\r\n     * If it does not contained an error, but `receipt.success` is `false`, then\r\n     * a rejected Transaction instance is returned.\r\n     *\r\n     * @param {string} txHash\r\n     * @returns {Promise<any>}\r\n     */\n\n\n    Blockchain.prototype.getTransaction = function (txHash) {\n      return __awaiter(this, void 0, void 0, function () {\n        var response, err_4;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , this.provider.send(\"GetTransaction\"\n              /* GetTransaction */\n              , txHash)];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.error) {\n                return [2\n                /*return*/\n                , Promise.reject(response.error)];\n              }\n\n              return [2\n              /*return*/\n              , response.result.receipt.success ? account.Transaction.confirm(toTxParams(response), this.provider) : account.Transaction.reject(toTxParams(response), this.provider)];\n\n            case 2:\n              err_4 = _a.sent();\n              throw err_4;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n    /**\r\n     * getRecentTransactions\r\n     *\r\n     * Gets a list of recent transactions\r\n     *\r\n     * @returns {Promise<RPCResponse<TxList, never>>}\r\n     */\n\n\n    Blockchain.prototype.getRecentTransactions = function () {\n      return this.provider.send(\"GetRecentTransactions\"\n      /* GetRecentTransactions */\n      );\n    };\n    /**\r\n     * getTransactionsForTxBlock\r\n     *\r\n     * Gets all transactions for a given TxBlock, grouped by shard id\r\n     *\r\n     * @param {number} txBlock\r\n     * @returns {Promise<RPCResponse<string[][], string>>}\r\n     */\n\n\n    Blockchain.prototype.getTransactionsForTxBlock = function (txBlock) {\n      return this.provider.send(\"GetTransactionsForTxBlock\"\n      /* GetTransactionsForTxBlock */\n      , txBlock.toString());\n    };\n    /**\r\n     * getTxnBodiesForTxBlock\r\n     *\r\n     * @param {number} txBlock\r\n     * @returns { romise<RPCResponse<TransactionObj[], string>>}\r\n     */\n\n\n    Blockchain.prototype.getTxnBodiesForTxBlock = function (txBlock) {\n      return this.provider.send(\"GetTxnBodiesForTxBlock\"\n      /* GetTxnBodiesForTxBlock */\n      , txBlock.toString());\n    };\n    /**\r\n     * getNumTxnsTxEpoch\r\n     *\r\n     * Gets the number of transactions procesed for a given Tx Epoch.\r\n     *\r\n     * @param {number} epoch\r\n     * @returns {Promise<RPCResponse<number, never>>}\r\n     */\n\n\n    Blockchain.prototype.getNumTxnsTxEpoch = function (epoch) {\n      return this.provider.send(\"GetNumTxnsTxEpoch\"\n      /* GetNumTxnsTxEpoch */\n      , epoch);\n    };\n    /**\r\n     * getNumTxnsDSEpoch\r\n     *\r\n     * Gets the number of transactions procesed for a given DS Epoch.\r\n     *\r\n     * @param {number} epoch\r\n     * @returns {Promise<any>}\r\n     */\n\n\n    Blockchain.prototype.getNumTxnsDSEpoch = function (epoch) {\n      return this.provider.send(\"GetNumTxnsDSEpoch\"\n      /* GetNumTxnsDSEpoch */\n      , epoch);\n    };\n    /**\r\n     * getMinimumGasPrice\r\n     *\r\n     * Gets the numeric minimum gas price\r\n     *\r\n     * @returns {Promise<RPCResponse<string, string>>}\r\n     */\n\n\n    Blockchain.prototype.getMinimumGasPrice = function () {\n      return this.provider.send(\"GetMinimumGasPrice\"\n      /* GetMinimumGasPrice */\n      );\n    };\n    /**\r\n     * getPendingTxn\r\n     * See the pending status of transaction\r\n     * @param txId\r\n     */\n\n\n    Blockchain.prototype.getPendingTxn = function (txId) {\n      return this.provider.send(\"GetPendingTxn\"\n      /* GetPendingTxn */\n      , txId.replace('0x', '').toLowerCase());\n    };\n    /**\r\n     * getPendingTxns\r\n     *\r\n     * Returns the pending status of all unvalidated Transactions.\r\n     *\r\n     * For each entry, the possible results are:\r\n     *\r\n     * confirmed\tcode\t     info\r\n     * false\t     0\t  Txn not pending\r\n     * false\t     1\t  Nonce too high\r\n     * false\t     2\t  Could not fit in as microblock gas limit reached\r\n     * false\t     3\t  Transaction valid but consensus not reached\r\n     */\n\n\n    Blockchain.prototype.getPendingTxns = function () {\n      return this.provider.send(\"GetPendingTxns\"\n      /* GetPendingTxns */\n      );\n    };\n    /**\r\n     * getBalance\r\n     *\r\n     * Gets the balance of an account by address\r\n     *\r\n     * @param {string} address\r\n     * @returns {Promise<RPCResponse<any, string>>}\r\n     */\n\n\n    Blockchain.prototype.getBalance = function (addr) {\n      var address = util.validation.isBech32(addr) ? crypto.fromBech32Address(addr) : addr;\n      return this.provider.send(\"GetBalance\"\n      /* GetBalance */\n      , address.replace('0x', '').toLowerCase());\n    };\n    /**\r\n     * getSmartContractCode - returns the smart contract code of a deployed contract.\r\n     *\r\n     * @param {string} address\r\n     * @returns {Promise<RPCResponse<{code: string }, string>>}\r\n     */\n\n\n    Blockchain.prototype.getSmartContractCode = function (addr) {\n      var address = util.validation.isBech32(addr) ? crypto.fromBech32Address(addr) : addr;\n      return this.provider.send(\"GetSmartContractCode\"\n      /* GetSmartContractCode */\n      , address.replace('0x', '').toLowerCase());\n    };\n    /**\r\n     * getSmartContractInit\r\n     *\r\n     * @param {string} address\r\n     * @returns {Promise<RPCResponse<Value[], string>>}\r\n     */\n\n\n    Blockchain.prototype.getSmartContractInit = function (addr) {\n      var address = util.validation.isBech32(addr) ? crypto.fromBech32Address(addr) : addr;\n      return this.provider.send(\"GetSmartContractInit\"\n      /* GetSmartContractInit */\n      , address.replace('0x', '').toLowerCase());\n    };\n    /**\r\n     * getSmartContractState - retrieves the entire state of a smart contract\r\n     *\r\n     * @param {string} address\r\n     * @returns {Promise<RPCResponse<any, string>>}\r\n     */\n\n\n    Blockchain.prototype.getSmartContractState = function (addr) {\n      var address = util.validation.isBech32(addr) ? crypto.fromBech32Address(addr) : addr;\n      return this.provider.send(\"GetSmartContractState\"\n      /* GetSmartContractState */\n      , address.replace('0x', '').toLowerCase());\n    };\n    /**\r\n     * getSmartContractSubState - Queries the contract state, filtered by the variable names.\r\n     * This function is the filtered version of `getSmartContractState`.\r\n     * As `getSubState` performs the filtering, `variableName` of a field is required.\r\n     * If the `subState` is not found, this returns a `null` response.\r\n     *\r\n     * @param {string} address\r\n     * @param { string } variableName - variable name within the state\r\n     * @param { string[] } indices - (optional) If the variable is of map type, you can specify an index (or indices)\r\n     * @returns {Promise<RPCResponse<any, string>>}\r\n     */\n\n\n    Blockchain.prototype.getSmartContractSubState = function (addr, variableName, indices) {\n      var address = util.validation.isBech32(addr) ? crypto.fromBech32Address(addr) : addr;\n\n      if (!variableName) {\n        throw new Error('Variable name required');\n      }\n\n      return this.provider.send(\"GetSmartContractSubState\"\n      /* GetSmartContractSubState */\n      , address.replace('0x', '').toLowerCase(), variableName, indices === undefined ? [] : indices);\n    };\n    /**\r\n     * getSmartContracts\r\n     *\r\n     * @param {string} address\r\n     * @returns {Promise<RPCResponse<Omit<ContractObj, 'init' | 'abi'>, string>>}\r\n     */\n\n\n    Blockchain.prototype.getSmartContracts = function (addr) {\n      var address = util.validation.isBech32(addr) ? crypto.fromBech32Address(addr) : addr;\n      return this.provider.send(\"GetSmartContracts\"\n      /* GetSmartContracts */\n      , address.replace('0x', '').toLowerCase());\n    };\n    /**\r\n     * getContractAddressFromTransactionID\r\n     *\r\n     * @param {string} txHash\r\n     * @returns {Promise<RPCResponse<string, string>>}\r\n     */\n\n\n    Blockchain.prototype.getContractAddressFromTransactionID = function (txHash) {\n      return this.provider.send(\"GetContractAddressFromTransactionID\"\n      /* GetContractAddressFromTransactionID */\n      , txHash);\n    };\n\n    __decorate([core.sign, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [account.Transaction, Number, Number, Boolean]), __metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"createTransaction\", null);\n\n    __decorate([core.sign, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [account.Transaction]), __metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"createTransactionWithoutConfirm\", null);\n\n    return Blockchain;\n  }(); //  This file is part of Zilliqa-Javascript-Library.\n  //\n  //  This program is free software: you can redistribute it and/or modify\n  //  it under the terms of the GNU General Public License as published by\n  //  the Free Software Foundation, either version 3 of the License, or\n  //  (at your option) any later version.\n  //\n  //   This program is distributed in the hope that it will be useful,\n  //   but WITHOUT ANY WARRANTY; without even the implied warranty of\n  //   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  //   GNU General Public License for more details.\n  //\n  //   You should have received a copy of the GNU General Public License\n  //   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n  var NetworkMethods;\n\n  (function (NetworkMethods) {\n    NetworkMethods[\"GetClientVersion\"] = \"GetClientVersion\";\n    NetworkMethods[\"GetNetworkId\"] = \"GetNetworkId\";\n    NetworkMethods[\"GetProtocolVersion\"] = \"GetProtocolVersion\";\n  })(NetworkMethods || (NetworkMethods = {}));\n\n  var Network = function () {\n    function Network(provider, signer) {\n      this.provider = provider;\n      this.signer = signer;\n    }\n\n    Network.prototype.getClientVersion = function () {\n      return this.provider.send(\"GetClientVersion\"\n      /* GetClientVersion */\n      );\n    };\n\n    Network.prototype.GetNetworkId = function () {\n      return this.provider.send(\"GetNetworkId\"\n      /* GetNetworkId */\n      );\n    };\n\n    Network.prototype.GetProtocolVersion = function (blockNum) {\n      return this.provider.send(\"GetProtocolVersion\"\n      /* GetProtocolVersion */\n      );\n    };\n\n    return Network;\n  }(); //  This file is part of Zilliqa-Javascript-Library.\n\n\n  exports.Blockchain = Blockchain;\n  exports.Network = Network;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../src/util.ts","../src/chain.ts","../src/network.ts","../src/index.ts"],"names":["toChecksumAddress","BN","Long","util","sign","Transaction","validation","fromBech32Address"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU General Public License for more details.\n//\n//   You should have received a copy of the GNU General Public License\n//   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { TxParams } from '@zilliqa-js/account';\nimport {\n  RPCResponse,\n  TransactionError,\n  TransactionObj,\n} from '@zilliqa-js/core';\nimport { toChecksumAddress } from '@zilliqa-js/crypto';\nimport { BN, Long } from '@zilliqa-js/util';\n\nexport function toTxParams(\n  response: RPCResponse<TransactionObj, never>,\n): TxParams {\n  const {\n    toAddr,\n    senderPubKey,\n    gasPrice,\n    gasLimit,\n    nonce,\n    amount,\n    receipt,\n    version,\n    code,\n    data,\n    ...rest\n  } = <TransactionObj>response.result;\n\n  const msg = receipt.errors\n    ? Object.keys(receipt.errors).reduce((acc, depth) => {\n        const errorMsgList = receipt.errors[depth].map(\n          (num: number) => TransactionError[num],\n        );\n        return { ...acc, [depth]: errorMsgList };\n      }, {})\n    : {};\n\n  return {\n    ...rest,\n    version: parseInt(version, 10),\n    toAddr: toChecksumAddress(toAddr),\n    pubKey: senderPubKey.replace('0x', ''),\n    gasPrice: new BN(gasPrice),\n    gasLimit: Long.fromString(gasLimit, 10),\n    amount: new BN(amount),\n    nonce: parseInt(nonce, 10),\n    receipt: {\n      ...receipt,\n      errors: msg,\n      cumulative_gas: parseInt(receipt.cumulative_gas, 10),\n    },\n  };\n}\n","//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU General Public License for more details.\n//\n//   You should have received a copy of the GNU General Public License\n//   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Transaction, util, Wallet } from '@zilliqa-js/account';\nimport { fromBech32Address } from '@zilliqa-js/crypto';\nimport { validation } from '@zilliqa-js/util';\nimport { ContractObj, Value } from '@zilliqa-js/contract';\nimport {\n  BlockchainInfo,\n  BlockList,\n  DsBlockObj,\n  GET_TX_ATTEMPTS,\n  PendingTxnResult,\n  PendingTxns,\n  Provider,\n  RPCMethod,\n  RPCResponse,\n  ShardingStructure,\n  sign,\n  TransactionObj,\n  MinerInfo,\n  TxBlockObj,\n  TxList,\n  ZilliqaModule,\n} from '@zilliqa-js/core';\n\nimport { Omit } from 'utility-types';\n\nimport { toTxParams } from './util';\n\nexport class Blockchain implements ZilliqaModule {\n  signer: Wallet;\n  provider: Provider;\n\n  constructor(provider: Provider, signer: Wallet) {\n    this.provider = provider;\n    this.provider.middleware.request.use(\n      util.formatOutgoingTx,\n      RPCMethod.CreateTransaction,\n    );\n    this.signer = signer;\n  }\n\n  /**\n   * getBlockChainInfo\n   *\n   * @returns {Promise<RPCResponse<BlockchainInfo, string>>}\n   */\n  getBlockChainInfo(): Promise<RPCResponse<BlockchainInfo, string>> {\n    return this.provider.send(RPCMethod.GetBlockchainInfo);\n  }\n\n  /**\n   * getShardingStructure\n   *\n   * @returns {Promise<RPCResponse<ShardingStructure, string>>}\n   */\n  getShardingStructure(): Promise<RPCResponse<ShardingStructure, string>> {\n    return this.provider.send(RPCMethod.GetShardingStructure);\n  }\n\n  /**\n   * getDSBlock\n   *\n   * Get details of a Directory Service block by block number.\n   *\n   * @param {number} blockNum\n   * @returns {Promise<RPCResponse<DsBlockObj, string>>}\n   */\n  getDSBlock(blockNum: number): Promise<RPCResponse<DsBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetDSBlock, blockNum.toString());\n  }\n\n  /**\n   * getLatestDSBlock\n   *\n   * Get details of the most recent Directory Service block.\n   *\n   * @returns {Promise<RPCResponse<DsBlockObj, string>>}\n   */\n  getLatestDSBlock(): Promise<RPCResponse<DsBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetLatestDSBlock);\n  }\n\n  /**\n   * getNumDSBlocks\n   *\n   * Gets the number of DS blocks that the network has processed.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getNumDSBlocks(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumDSBlocks);\n  }\n\n  /**\n   * getDSBlockRate\n   *\n   * Gets the average rate of DS blocks processed per second\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getDSBlockRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetDSBlockRate);\n  }\n\n  /**\n   * getDSBlockListing\n   *\n   * Get a paginated list of Directory Service blocks. Pass in page number as\n   * parameter. Returns a maxPages variable that specifies the max number of\n   * pages. 1 - latest blocks, maxPages - oldest blocks.\n   *\n   * @param {number} max\n   * @returns {Promise<RPCResponse<BlockList, string>>}\n   */\n  getDSBlockListing(max: number): Promise<RPCResponse<BlockList, string>> {\n    return this.provider.send(RPCMethod.DSBlockListing, max);\n  }\n\n  /**\n   * getTxBlock\n   *\n   * Get details of a Transaction block by block number.\n   *\n   * @param {number} blockNum\n   * @returns {Promise<RPCResponse<TxBlockObj, string>>}\n   */\n  getTxBlock(blockNum: number): Promise<RPCResponse<TxBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetTxBlock, blockNum.toString());\n  }\n\n  /**\n   * getLatestTxBlock\n   *\n   * Get details of the most recent Transaction block.\n   *\n   * @returns {Promise<RPCResponse<TxBlockObj, string>>}\n   */\n  getLatestTxBlock(): Promise<RPCResponse<TxBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetLatestTxBlock);\n  }\n\n  /**\n   * getNumTxBlocks\n   *\n   * Gets the total number of TxBlocks.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getNumTxBlocks(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxBlocks);\n  }\n\n  /**\n   * getTxBlockRate\n   *\n   * Gets the average number of Tx blocks per second.\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getTxBlockRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetTxBlockRate);\n  }\n\n  /**\n   * getTxBlockListing\n   *\n   * Get a paginated list of Transaction blocks. Takes a page number as\n   * parameter, where each page contains a list of 10 blocks (max). Returns\n   * a maxPages variable that specifies the max number of pages. 1 - latest\n   * blocks, maxPages - oldest blocks.\n   *\n   * @param {number} max\n   * @returns {Promise<RPCResponse<BlockList, string>>}\n   */\n  getTxBlockListing(max: number): Promise<RPCResponse<BlockList, string>> {\n    return this.provider.send(RPCMethod.TxBlockListing, max);\n  }\n\n  /**\n   * getNumTransactions\n   *\n   * Gets the number of transactions processed by the network so far.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getNumTransactions(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTransactions);\n  }\n\n  /**\n   * getTransactionRate\n   *\n   * Gets the number of transactions processed per second\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getTransactionRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetTransactionRate);\n  }\n\n  /**\n   * getCurrentMiniEpoch\n   *\n   * Gets the current Tx Epoch.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getCurrentMiniEpoch(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetCurrentMiniEpoch);\n  }\n\n  /**\n   * getCurrentDSEpoch\n   *\n   * Gets the current DS Epoch.\n   *\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n  getCurrentDSEpoch(): Promise<RPCResponse<any, string>> {\n    return this.provider.send(RPCMethod.GetCurrentDSEpoch);\n  }\n\n  /**\n   * getPrevDifficulty\n   *\n   * Gets shard difficulty for previous PoW round\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getPrevDifficulty(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetPrevDifficulty);\n  }\n\n  /**\n   * getPrevDSDifficulty\n   *\n   * Gets DS difficulty for previous PoW round\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getPrevDSDifficulty(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetPrevDSDifficulty);\n  }\n\n  /**\n   * getTotalCoinSupply\n   *\n   * Returns the total supply (ZIL) of coins in the network.\n   */\n  getTotalCoinSupply(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetTotalCoinSupply);\n  }\n\n  /**\n   * getMinerInfo\n   *\n   * Returns the mining nodes (i.e., the members of the DS committee and shards) at the specified DS block.\n   *\n   * Notes:\n   * 1. Nodes owned by Zilliqa Research are omitted.\n   * 2. dscommittee has no size field since the DS committee size is fixed for a given chain.\n   * 3. For the Zilliqa Mainnet, this API is only available from DS block 5500 onwards.\n   *\n   */\n  getMinerInfo(dsBlockNumber: string): Promise<RPCResponse<MinerInfo, any>> {\n    return this.provider.send(RPCMethod.GetMinerInfo, dsBlockNumber);\n  }\n\n  /**\n   * createTransaction\n   *\n   * Creates a transaction and polls the lookup node for a transaction\n   * receipt. The transaction is considered to be lost if it is not confirmed\n   * within the timeout period.\n   *\n   * @param {Transaction} tx\n   * @param {number} maxAttempts - (optional) number of times to poll before timing out\n   * @param {number} number - (optional) interval in ms\n   * @returns {Promise<Transaction>} - the Transaction that has been signed and\n   * broadcasted to the network.\n   */\n  @sign\n  async createTransaction(\n    tx: Transaction,\n    maxAttempts: number = GET_TX_ATTEMPTS,\n    interval: number = 1000,\n    blockConfirm: boolean = false,\n  ): Promise<Transaction> {\n    try {\n      const response = await this.provider.send(RPCMethod.CreateTransaction, {\n        ...tx.txParams,\n        priority: tx.toDS,\n      });\n\n      if (response.error) {\n        throw response.error;\n      }\n      if (blockConfirm) {\n        return tx.blockConfirm(response.result.TranID, maxAttempts, interval);\n      }\n      return tx.confirm(response.result.TranID, maxAttempts, interval);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * createTransactionRaw\n   *\n   * Create a transaction by using a exist signed transaction payload\n   * This payload may come form some offline signing software like ledger\n   * Currently we haven't supported convert a singed transaction back to transaction param, so we won't perform\n   * confirm logic here, but there is another convenient way to do so, can refer examples/createTransactionRaw.js\n   *\n   * @param payload\n   */\n  async createTransactionRaw(payload: string): Promise<string> {\n    try {\n      const tx = JSON.parse(payload);\n      const response = await this.provider.send(\n        RPCMethod.CreateTransaction,\n        tx,\n      );\n      if (response.error) {\n        throw response.error;\n      }\n      return response.result.TranID;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  @sign\n  async createTransactionWithoutConfirm(tx: Transaction): Promise<Transaction> {\n    try {\n      const response = await this.provider.send(RPCMethod.CreateTransaction, {\n        ...tx.txParams,\n        priority: tx.toDS,\n      });\n      if (response.error) {\n        throw response.error;\n      }\n      tx.id = response.result.TranID;\n      return tx;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * getTransaction\n   *\n   * Retrieves a transaction from the blockchain by its hash. If the result\n   * contains an Error, a rejected Promise is returned with the erorr message.\n   * If it does not contained an error, but `receipt.success` is `false`, then\n   * a rejected Transaction instance is returned.\n   *\n   * @param {string} txHash\n   * @returns {Promise<any>}\n   */\n  async getTransaction(txHash: string): Promise<Transaction> {\n    try {\n      const response = await this.provider.send<TransactionObj>(\n        RPCMethod.GetTransaction,\n        txHash,\n      );\n\n      if (response.error) {\n        return Promise.reject(response.error);\n      }\n\n      return response.result.receipt.success\n        ? Transaction.confirm(toTxParams(response), this.provider)\n        : Transaction.reject(toTxParams(response), this.provider);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * getRecentTransactions\n   *\n   * Gets a list of recent transactions\n   *\n   * @returns {Promise<RPCResponse<TxList, never>>}\n   */\n  getRecentTransactions(): Promise<RPCResponse<TxList, never>> {\n    return this.provider.send(RPCMethod.GetRecentTransactions);\n  }\n\n  /**\n   * getTransactionsForTxBlock\n   *\n   * Gets all transactions for a given TxBlock, grouped by shard id\n   *\n   * @param {number} txBlock\n   * @returns {Promise<RPCResponse<string[][], string>>}\n   */\n  getTransactionsForTxBlock(\n    txBlock: number,\n  ): Promise<RPCResponse<string[][], string>> {\n    return this.provider.send(\n      RPCMethod.GetTransactionsForTxBlock,\n      txBlock.toString(),\n    );\n  }\n\n  /**\n   * getTxnBodiesForTxBlock\n   *\n   * @param {number} txBlock\n   * @returns { romise<RPCResponse<TransactionObj[], string>>}\n   */\n  getTxnBodiesForTxBlock(\n    txBlock: number,\n  ): Promise<RPCResponse<TransactionObj[], string>> {\n    return this.provider.send(\n      RPCMethod.GetTxnBodiesForTxBlock,\n      txBlock.toString(),\n    );\n  }\n\n  /**\n   * getNumTxnsTxEpoch\n   *\n   * Gets the number of transactions procesed for a given Tx Epoch.\n   *\n   * @param {number} epoch\n   * @returns {Promise<RPCResponse<number, never>>}\n   */\n  getNumTxnsTxEpoch(epoch: number): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxnsTxEpoch, epoch);\n  }\n\n  /**\n   * getNumTxnsDSEpoch\n   *\n   * Gets the number of transactions procesed for a given DS Epoch.\n   *\n   * @param {number} epoch\n   * @returns {Promise<any>}\n   */\n  getNumTxnsDSEpoch(epoch: number): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxnsDSEpoch, epoch);\n  }\n\n  /**\n   * getMinimumGasPrice\n   *\n   * Gets the numeric minimum gas price\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getMinimumGasPrice() {\n    return this.provider.send<string, string>(RPCMethod.GetMinimumGasPrice);\n  }\n\n  /**\n   * getPendingTxn\n   * See the pending status of transaction\n   * @param txId\n   */\n  getPendingTxn(txId: string): Promise<RPCResponse<PendingTxnResult, string>> {\n    return this.provider.send(\n      RPCMethod.GetPendingTxn,\n      txId.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getPendingTxns\n   *\n   * Returns the pending status of all unvalidated Transactions.\n   *\n   * For each entry, the possible results are:\n   *\n   * confirmed\tcode\t     info\n   * false\t     0\t  Txn not pending\n   * false\t     1\t  Nonce too high\n   * false\t     2\t  Could not fit in as microblock gas limit reached\n   * false\t     3\t  Transaction valid but consensus not reached\n   */\n  getPendingTxns(): Promise<RPCResponse<PendingTxns, any>> {\n    return this.provider.send(RPCMethod.GetPendingTxns);\n  }\n\n  /**\n   * getBalance\n   *\n   * Gets the balance of an account by address\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n  getBalance(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetBalance,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractCode - returns the smart contract code of a deployed contract.\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<{code: string }, string>>}\n   */\n  getSmartContractCode(\n    addr: string,\n  ): Promise<RPCResponse<{ code: string }, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractCode,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractInit\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<Value[], string>>}\n   */\n  getSmartContractInit(addr: string): Promise<RPCResponse<Value[], string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractInit,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractState - retrieves the entire state of a smart contract\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n  getSmartContractState(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractState,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractSubState - Queries the contract state, filtered by the variable names.\n   * This function is the filtered version of `getSmartContractState`.\n   * As `getSubState` performs the filtering, `variableName` of a field is required.\n   * If the `subState` is not found, this returns a `null` response.\n   *\n   * @param {string} address\n   * @param { string } variableName - variable name within the state\n   * @param { string[] } indices - (optional) If the variable is of map type, you can specify an index (or indices)\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n\n  getSmartContractSubState(\n    addr: string,\n    variableName: string,\n    indices?: string[],\n  ): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    if (!variableName) {\n      throw new Error('Variable name required');\n    }\n\n    return this.provider.send(\n      RPCMethod.GetSmartContractSubState,\n      address.replace('0x', '').toLowerCase(),\n      variableName,\n      indices === undefined ? [] : indices,\n    );\n  }\n\n  /**\n   * getSmartContracts\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<Omit<ContractObj, 'init' | 'abi'>, string>>}\n   */\n  getSmartContracts(\n    addr: string,\n  ): Promise<RPCResponse<Omit<ContractObj, 'init' | 'abi'>, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContracts,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getContractAddressFromTransactionID\n   *\n   * @param {string} txHash\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getContractAddressFromTransactionID(\n    txHash: string,\n  ): Promise<RPCResponse<string, string>> {\n    return this.provider.send(\n      RPCMethod.GetContractAddressFromTransactionID,\n      txHash,\n    );\n  }\n}\n","//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU General Public License for more details.\n//\n//   You should have received a copy of the GNU General Public License\n//   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Provider, ZilliqaModule } from '@zilliqa-js/core';\nimport { Wallet } from '@zilliqa-js/account';\n\nconst enum NetworkMethods {\n  GetClientVersion = 'GetClientVersion',\n  GetNetworkId = 'GetNetworkId',\n  GetProtocolVersion = 'GetProtocolVersion',\n}\n\nexport class Network implements ZilliqaModule {\n  provider: Provider;\n  signer: Wallet;\n\n  constructor(provider: Provider, signer: Wallet) {\n    this.provider = provider;\n    this.signer = signer;\n  }\n\n  getClientVersion(): Promise<any> {\n    return this.provider.send(NetworkMethods.GetClientVersion);\n  }\n\n  GetNetworkId(): Promise<any> {\n    return this.provider.send(NetworkMethods.GetNetworkId);\n  }\n\n  GetProtocolVersion(blockNum: number): Promise<any> {\n    return this.provider.send(NetworkMethods.GetProtocolVersion);\n  }\n}\n","//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU General Public License for more details.\n//\n//   You should have received a copy of the GNU General Public License\n//   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nexport { Blockchain } from './chain';\nexport { Network } from './network';\n"]},"metadata":{},"sourceType":"script"}