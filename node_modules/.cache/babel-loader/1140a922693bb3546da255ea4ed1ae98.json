{"ast":null,"code":"var _jsxFileName = \"/home/webelight1/Documents/Zilliqa/dev-portal-examples/hello-world/src/App.js\";\nimport React, { createRef } from 'react';\nimport './App.css';\n\nconst {\n  BN,\n  Long,\n  bytes,\n  units\n} = require('@zilliqa-js/util');\n\nconst {\n  toBech32Address\n} = require('@zilliqa-js/crypto');\n\nconst {\n  Zilliqa\n} = require('@zilliqa-js/zilliqa');\n\nconst {\n  StatusType,\n  MessageType\n} = require('@zilliqa-js/subscriptions');\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddressChange = event => {\n      this.setState({\n        contractAddress: event.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      localStorage.setItem(\"contract_address\", this.state.contractAddress);\n    };\n\n    this.verifyWalletEnable = async callback => {\n      if (window.zilPay.wallet.isEnable) {\n        callback();\n      } else {\n        const isConnect = await window.zilPay.wallet.connect();\n\n        if (isConnect) {\n          callback();\n        } else {\n          alert(\"Not able to call setHello as transaction is rejected\");\n        }\n      }\n    };\n\n    this.setPublicKey = async () => {\n      const zilliqa = window.zilPay;\n      let value = this.pubKeyInputRef.current.value;\n      console.log(value, \"setPublicKey value\");\n      let contractAddress = localStorage.getItem(\"contract_address\");\n      const CHAIN_ID = 333;\n      const MSG_VERSION = 1;\n      const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\n      const myGasPrice = units.toQa('2000', units.Units.Li); // Gas Price that will be used by all transactions\n      // contractAddress = contractAddress.substring(2);\n\n      const ftAddr = toBech32Address(contractAddress);\n\n      try {\n        const contract = zilliqa.contracts.at(ftAddr);\n        const callTx = await contract.call('setPublicKey', [{\n          vname: 'pubKey',\n          type: 'ByStr33',\n          value: value\n        }], {\n          // amount, gasPrice and gasLimit must be explicitly provided\n          version: VERSION,\n          amount: new BN(0),\n          gasPrice: myGasPrice,\n          gasLimit: Long.fromNumber(10000)\n        });\n        console.log(callTx, \"setPublicKey response\");\n        alert('success');\n      } catch (err) {\n        alert('error');\n        console.log(err);\n      }\n    };\n\n    this.getPublicKey = async () => {\n      const zilliqa = window.zilPay;\n      let contractAddress = localStorage.getItem(\"contract_address\");\n      const CHAIN_ID = 333;\n      const MSG_VERSION = 1;\n      const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\n      const myGasPrice = units.toQa('2000', units.Units.Li); // Gas Price that will be used by all transactions\n      // contractAddress = contractAddress.substring(2);\n\n      const ftAddr = toBech32Address(contractAddress);\n\n      try {\n        const contract = zilliqa.contracts.at(ftAddr);\n        const callTx = await contract.call('getPublicKey', [], {\n          // amount, gasPrice and gasLimit must be explicitly provided\n          version: VERSION,\n          amount: new BN(0),\n          gasPrice: myGasPrice,\n          gasLimit: Long.fromNumber(10000)\n        });\n        console.log(callTx, \"callTx\");\n        alert('success');\n\n        if (callTx.pubKey) {\n          this.setState({\n            pubKey: callTx.pubKey\n          });\n        } // this.eventLogSubscription();\n\n      } catch (err) {\n        alert('error');\n        console.log(err);\n      }\n    };\n\n    this.connectZilpay = async () => {\n      try {\n        await window.zilPay.wallet.connect();\n\n        if (window.zilPay.wallet.isConnect) {\n          localStorage.setItem(\"zilpay_connect\", true);\n          window.location.reload(false);\n        } else {\n          alert(\"Zilpay connection failed, try again...\");\n        }\n      } catch (error) {}\n    };\n\n    this.state = {\n      contractAddress: '',\n      welcomeMsg: '',\n      pubKey: ''\n    };\n    this.pubKeyInputRef = createRef(null);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, \" \", `Current Contract Address : ${localStorage.getItem(\"contract_address\")}`, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, \"Update Contract Address\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, \"New Address \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleAddressChange,\n      size: \"70\",\n      placeholder: \"Format: 0x47d9CEea9a2DA23dc6b2D96A16F7Fbf884580665\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, \" Lists of Transitions\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, 'Set Public Key'), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: this.pubKeyInputRef,\n      size: \"30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.verifyWalletEnable(this.setPublicKey),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, 'Set Public Key'), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, 'Get Public Key'), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.verifyWalletEnable(this.getPublicKey),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, 'Get Public Key'), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }, \" \", `Current Public Key : ${this.state.pubKey}`, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, \" \", `Current Welcome Msg : ${this.state.welcomeMsg}`, \" \"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }), !localStorage.getItem(\"zilpay_connect\") && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.connectZilpay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 53\n      }\n    }, \"Connect Zilpay\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/webelight1/Documents/Zilliqa/dev-portal-examples/hello-world/src/App.js"],"names":["React","createRef","BN","Long","bytes","units","require","toBech32Address","Zilliqa","StatusType","MessageType","App","Component","constructor","props","handleAddressChange","event","setState","contractAddress","target","value","handleSubmit","localStorage","setItem","state","verifyWalletEnable","callback","window","zilPay","wallet","isEnable","isConnect","connect","alert","setPublicKey","zilliqa","pubKeyInputRef","current","console","log","getItem","CHAIN_ID","MSG_VERSION","VERSION","pack","myGasPrice","toQa","Units","Li","ftAddr","contract","contracts","at","callTx","call","vname","type","version","amount","gasPrice","gasLimit","fromNumber","err","getPublicKey","pubKey","connectZilpay","location","reload","error","welcomeMsg","render"],"mappings":"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","sourcesContent":["import React, { createRef } from 'react';\nimport './App.css';\nconst { BN, Long, bytes, units } = require('@zilliqa-js/util');\nconst { toBech32Address } = require('@zilliqa-js/crypto');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst { StatusType, MessageType } = require('@zilliqa-js/subscriptions');\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      contractAddress: '',\n      welcomeMsg: '',\n      pubKey: ''\n    };\n\n    this.pubKeyInputRef = createRef(null)\n  }\n\n  handleAddressChange = (event) => {\n    this.setState({ contractAddress: event.target.value });\n  }\n\n  handleSubmit = () => {\n    localStorage.setItem(\"contract_address\", this.state.contractAddress);\n  }\n\n  verifyWalletEnable = async (callback) => {\n    if (window.zilPay.wallet.isEnable) {\n      callback();\n    }\n    else {\n      const isConnect = await window.zilPay.wallet.connect();\n      if (isConnect) {\n        callback();\n      } else {\n        alert(\"Not able to call setHello as transaction is rejected\");\n      }\n    }\n  }\n\n  setPublicKey = async () => {\n    const zilliqa = window.zilPay;\n    let value = this.pubKeyInputRef.current.value\n\n    console.log(value, \"setPublicKey value\");\n\n    let contractAddress = localStorage.getItem(\"contract_address\");\n    const CHAIN_ID = 333;\n    const MSG_VERSION = 1;\n    const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\n    const myGasPrice = units.toQa('2000', units.Units.Li); // Gas Price that will be used by all transactions\n    // contractAddress = contractAddress.substring(2);\n\n    const ftAddr = toBech32Address(contractAddress);\n    try {\n      const contract = zilliqa.contracts.at(ftAddr);\n      const callTx = await contract.call(\n        'setPublicKey',\n        [\n          {\n            vname: 'pubKey',\n            type: 'ByStr33',\n            value: value\n          }\n        ],\n        {\n          // amount, gasPrice and gasLimit must be explicitly provided\n          version: VERSION,\n          amount: new BN(0),\n          gasPrice: myGasPrice,\n          gasLimit: Long.fromNumber(10000),\n        }\n      );\n      console.log(callTx, \"setPublicKey response\");\n      alert('success')\n\n\n    } catch (err) {\n      alert('error')\n\n      console.log(err);\n    }\n  }\n\n  getPublicKey = async () => {\n\n    const zilliqa = window.zilPay;\n    let contractAddress = localStorage.getItem(\"contract_address\");\n\n    const CHAIN_ID = 333;\n    const MSG_VERSION = 1;\n    const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\n\n    const myGasPrice = units.toQa('2000', units.Units.Li); // Gas Price that will be used by all transactions\n\n    // contractAddress = contractAddress.substring(2);\n    const ftAddr = toBech32Address(contractAddress);\n    try {\n      const contract = zilliqa.contracts.at(ftAddr);\n      const callTx = await contract.call(\n        'getPublicKey',\n        [],\n        {\n          // amount, gasPrice and gasLimit must be explicitly provided\n          version: VERSION,\n          amount: new BN(0),\n          gasPrice: myGasPrice,\n          gasLimit: Long.fromNumber(10000),\n        }\n      );\n      console.log(callTx, \"callTx\");\n      alert('success')\n\n      if (callTx.pubKey) {\n        this.setState({ pubKey: callTx.pubKey })\n      }\n      // this.eventLogSubscription();\n    } catch (err) {\n      alert('error')\n      console.log(err);\n    }\n  }\n\n  // // Code that listens to websocket and updates welcome message when getHello() gets called.\n  // async eventLogSubscription() {\n  //   const zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n  //   const subscriber = zilliqa.subscriptionBuilder.buildEventLogSubscriptions(\n  //     'wss://dev-ws.zilliqa.com',\n  //     {\n  //       // smart contract address you want to listen on  \n  //       addresses: [localStorage.getItem(\"contract_address\")],\n  //     },\n  //   );\n\n  //   subscriber.emitter.on(StatusType.SUBSCRIBE_EVENT_LOG, (event) => {\n  //     // if subscribe success, it will echo the subscription info\n  //     console.log('get SubscribeEventLog echo : ', event);\n  //   });\n\n  //   subscriber.emitter.on(MessageType.EVENT_LOG, (event) => {\n  //     console.log('get new event log: ', JSON.stringify(event));\n  //     // updating the welcome msg when a new event log is received related to getHello() transition\n  //     if (event.hasOwnProperty(\"value\")) {\n  //       if (event.value[0].event_logs[0]._eventname == \"getHello()\") {\n  //         let welcomeMsg = event.value[0].event_logs[0].params[0].value;\n  //         this.setState({ welcomeMsg: welcomeMsg });\n  //         console.log(\"welcomeMsg\", welcomeMsg);\n  //       }\n  //     }\n  //   });\n  //   await subscriber.start();\n  // }\n\n  connectZilpay = async () => {\n    try {\n      await window.zilPay.wallet.connect();\n      if (window.zilPay.wallet.isConnect) {\n        localStorage.setItem(\"zilpay_connect\", true);\n        window.location.reload(false);\n      } else {\n        alert(\"Zilpay connection failed, try again...\")\n      }\n    } catch (error) { }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div> {`Current Contract Address : ${localStorage.getItem(\"contract_address\")}`} </div>\n        <h3>Update Contract Address</h3>\n\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            New Address <br />\n            <input type=\"text\" onChange={this.handleAddressChange} size=\"70\" placeholder=\"Format: 0x47d9CEea9a2DA23dc6b2D96A16F7Fbf884580665\" />\n          </label><br />\n          <input type=\"submit\" value=\"Submit\" />\n          <hr></hr>\n        </form>\n\n\n        <div> Lists of Transitions</div>\n        <br />\n\n        <label>{'Set Public Key'}</label>\n        <br />\n        <input type=\"text\" ref={this.pubKeyInputRef} size=\"30\" />\n        <br />\n        <button onClick={() => this.verifyWalletEnable(this.setPublicKey)}>{'Set Public Key'}</button>\n        <br />\n        <br />\n\n        <label>{'Get Public Key'}</label>\n        <br />\n        <button onClick={() => this.verifyWalletEnable(this.getPublicKey)}>{'Get Public Key'}</button>\n        <br />\n        <br />\n\n        <div> {`Current Public Key : ${this.state.pubKey}`} </div>\n        <div> {`Current Welcome Msg : ${this.state.welcomeMsg}`} </div>\n        <hr></hr>\n\n        {!localStorage.getItem(\"zilpay_connect\") && <button onClick={this.connectZilpay}>Connect Zilpay</button>}\n        <br /><br />\n\n      </div>\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}